<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<context:annotation-config />
	
	<!-- @Controller, @Service, @Component の付いたコンポーネントを検出するパッケージの指定。 -->
    <context:component-scan base-package="com.sm24soft">
		<context:include-filter type="regex" expression=".*controller\.[^.]*" />
		<context:include-filter type="regex" expression=".*service\.[^.]*" />
		<context:include-filter type="regex" expression=".*component\.[^.]*" />
	</context:component-scan>
    
	<!-- @Controller の付いたクラスを Controller として登録。 -->
	<mvc:annotation-driven />
	
	<!-- Enables annotation-driven task scheduling; detects @Scheduled- and 
        @Async-annotated process methods to be invoked via proxy -->
<!-- 	<task:scheduler id="taskScheduler" /> -->
<!-- 	<task:executor id="taskExecutor" pool-size="1" /> -->
<!-- 	<task:annotation-driven executor="taskExecutor" scheduler="taskScheduler" /> -->
    
    <!-- Root Context: defines shared resources visible to all other web components -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:default.properties</value>
				<value>classpath:application.properties</value>
				<value>classpath:database.properties</value>
			</list>
		</property>
	</bean>
	
    <!-- Saves a locale change using a cookie -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />
    
	<!-- If true , Spring uses the full path within the current Servlet context 
		to find an appropriate handler. If false (the default), the path within the 
		current Servlet mapping is used. For example, if a Servlet is mapped using 
		/testing/* and the alwaysUseFullPath property is set to true, /testing/viewPage.html 
		is used, whereas if the property is set to false, /viewPage.html is used. -->
    <bean id="handlerMapping" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
		<property name="alwaysUseFullPath" value="true" />
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--  the maximum size of an uploaded file in bytes -->
		<property name="maxUploadSize" value="20971520" /> <!-- 20MB -->
		
		<!-- max size of file in memory (in bytes) -->
        <property name="maxInMemorySize" value="1048576" /> <!-- 1MB -->
        <property name="defaultEncoding" value="utf-8" />
	</bean>

	<!-- Enables convention-based request URL mapping to @Controllers (ex: /person/* maps to PersonController) -->
	<bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping">
		<property name="order" value="1" />
	</bean>
	
	<!-- Turn on @Autowired, @PostConstruct etc support -->
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	<bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />
	
	<bean id="jacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	
	<!-- Production implementation of the JavaMailSender interface, supporting 
		both JavaMail MimeMessages and Spring SimpleMailMessages -->
<!-- 	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> -->
<!-- 		<property name="host" value="smtp.gmail.com" /> -->
<!-- 		<property name="port" value="587" /> -->
<!-- 		<property name="username" value="dang.ngoc.son.vsi@gmail.com" /> -->
<!-- 		<property name="password" value="xxx" /> -->
<!-- 		<property name="javaMailProperties"> -->
<!-- 			<props> -->
<!-- 				<prop key="mail.transport.protocol">smtp</prop> -->
<!-- 				<prop key="mail.smtp.auth">true</prop> -->
<!-- 				<prop key="mail.smtp.starttls.enable">true</prop> -->
<!-- 				<prop key="mail.debug">true</prop> -->
<!-- 			</props> -->
<!-- 		</property> -->
<!-- 	</bean> -->
</beans>